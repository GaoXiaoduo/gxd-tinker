apply plugin: 'com.android.application'
// 依赖插件脚本
apply from: 'tinker-support.gradle'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId "com.gxd.tinker"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        /**
         * you can use multiDex and install it in your ApplicationLifeCycle implement
         */
        multiDexEnabled true
        //keep specific classes using proguard syntax
        ndk {
            //设置支持的SO库架构
            abiFilters 'armeabi' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }
    signingConfigs {

        Properties localProps = new Properties()
        localProps.load(new FileInputStream(file('../gxd-sign/gxd-sign.properties')))

        debug {
            // 使用assert确保存在该属性否则报错，避免错误打包
            assert localProps['sign-debug-name']

            keyAlias localProps["aliasDebug"]
            keyPassword localProps["passDebug"]
            storeFile file(localProps["storeDebug"])
            storePassword localProps["storePassDebug"]
        }

        release {
            // 使用assert确保存在该属性否则报错，避免错误打包
            assert localProps['sign-name']

            keyAlias localProps["alias"]
            keyPassword localProps["pass"]
            storeFile file(localProps["store"])
            storePassword localProps["storePass"]
        }
    }

    buildTypes {
        debug {
            // 是否进行混淆
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    //recommend
    dexOptions {
        jumboMode = true
    }

    lintOptions {
        abortOnError false
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    // 用来测试multiDex
    implementation 'com.android.support:multidex:1.0.3'

    // implementation 'com.tencent.bugly:nativecrashreport:3.6.0'
    // implementation 'com.tencent.bugly:crashreport_upgrade:1.3.1'

    // 注释掉原有bugly的仓库
    // compile 'com.tencent.bugly:crashreport:latest.release'//其中latest.release指代最新版本号，也可以指定明确的版本号，例如1.3.4
    implementation 'com.tencent.bugly:crashreport_upgrade:1.3.6'
    // 指定tinker依赖版本（注：应用升级1.3.5版本起，不再内置tinker）
    implementation 'com.tencent.tinker:tinker-android-lib:1.9.9'
    // 其中latest.release指代最新版本号，也可以指定明确的版本号，例如2.2.0
    implementation 'com.tencent.bugly:nativecrashreport:3.6.0.1'

}
